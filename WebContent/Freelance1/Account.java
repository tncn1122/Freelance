package Freelance1;
// Generated Jan 11, 2021, 8:21:37 PM by Hibernate Tools 4.3.5.Final

import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * Account generated by hbm2java
 */
@Entity
@Table(name = "account", schema = "dbo", catalog = "freelance", uniqueConstraints = @UniqueConstraint(columnNames = "acc"))
public class Account implements java.io.Serializable {

	private Integer id;
	private Serializable acc;
	private Serializable pass;
	private Set<Jobs> jobses = new HashSet<Jobs>(0);
	private Set<JobsUser> jobsUsers = new HashSet<JobsUser>(0);
	private Set<Favorites> favoriteses = new HashSet<Favorites>(0);
	private Set<Jobs> jobses_1 = new HashSet<Jobs>(0);
	private Set<JobsUser> jobsUsers_1 = new HashSet<JobsUser>(0);
	private Set<Rating> ratingsForId = new HashSet<Rating>(0);
	private Set<UserSkill> userSkills = new HashSet<UserSkill>(0);
	private RatingFa ratingFa;
	private Users users;
	private Set<UserSkill> userSkills_1 = new HashSet<UserSkill>(0);
	private RatingFa ratingFa;
	private Users users;
	private Set<Favorites> favoriteses_1 = new HashSet<Favorites>(0);
	private RatingFa ratingFa;
	private Set<JobsUser> jobsUsers_2 = new HashSet<JobsUser>(0);
	private Set<UserSkill> userSkills_2 = new HashSet<UserSkill>(0);
	private Set<Jobs> jobses_2 = new HashSet<Jobs>(0);
	private Users users;
	private Set<Rating> ratingsForUserId = new HashSet<Rating>(0);
	private Set<Favorites> favoriteses_2 = new HashSet<Favorites>(0);

	public Account() {
	}

	public Account(Serializable acc, Serializable pass, Set<Jobs> jobses, Set<JobsUser> jobsUsers,
			Set<Favorites> favoriteses, Set<Jobs> jobses_1, Set<JobsUser> jobsUsers_1, Set<Rating> ratingsForId,
			Set<UserSkill> userSkills, RatingFa ratingFa, Users users, Set<UserSkill> userSkills_1, RatingFa ratingFa,
			Users users, Set<Favorites> favoriteses_1, RatingFa ratingFa, Set<JobsUser> jobsUsers_2,
			Set<UserSkill> userSkills_2, Set<Jobs> jobses_2, Users users, Set<Rating> ratingsForUserId,
			Set<Favorites> favoriteses_2) {
		this.acc = acc;
		this.pass = pass;
		this.jobses = jobses;
		this.jobsUsers = jobsUsers;
		this.favoriteses = favoriteses;
		this.jobses_1 = jobses_1;
		this.jobsUsers_1 = jobsUsers_1;
		this.ratingsForId = ratingsForId;
		this.userSkills = userSkills;
		this.ratingFa = ratingFa;
		this.users = users;
		this.userSkills_1 = userSkills_1;
		this.ratingFa = ratingFa;
		this.users = users;
		this.favoriteses_1 = favoriteses_1;
		this.ratingFa = ratingFa;
		this.jobsUsers_2 = jobsUsers_2;
		this.userSkills_2 = userSkills_2;
		this.jobses_2 = jobses_2;
		this.users = users;
		this.ratingsForUserId = ratingsForUserId;
		this.favoriteses_2 = favoriteses_2;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "acc", unique = true)
	public Serializable getAcc() {
		return this.acc;
	}

	public void setAcc(Serializable acc) {
		this.acc = acc;
	}

	@Column(name = "pass")
	public Serializable getPass() {
		return this.pass;
	}

	public void setPass(Serializable pass) {
		this.pass = pass;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	public Set<Jobs> getJobses() {
		return this.jobses;
	}

	public void setJobses(Set<Jobs> jobses) {
		this.jobses = jobses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	public Set<JobsUser> getJobsUsers() {
		return this.jobsUsers;
	}

	public void setJobsUsers(Set<JobsUser> jobsUsers) {
		this.jobsUsers = jobsUsers;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	public Set<Favorites> getFavoriteses() {
		return this.favoriteses;
	}

	public void setFavoriteses(Set<Favorites> favoriteses) {
		this.favoriteses = favoriteses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	public Set<Jobs> getJobses_1() {
		return this.jobses_1;
	}

	public void setJobses_1(Set<Jobs> jobses_1) {
		this.jobses_1 = jobses_1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	public Set<JobsUser> getJobsUsers_1() {
		return this.jobsUsers_1;
	}

	public void setJobsUsers_1(Set<JobsUser> jobsUsers_1) {
		this.jobsUsers_1 = jobsUsers_1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "accountById")
	public Set<Rating> getRatingsForId() {
		return this.ratingsForId;
	}

	public void setRatingsForId(Set<Rating> ratingsForId) {
		this.ratingsForId = ratingsForId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	public Set<UserSkill> getUserSkills() {
		return this.userSkills;
	}

	public void setUserSkills(Set<UserSkill> userSkills) {
		this.userSkills = userSkills;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "account")
	public RatingFa getRatingFa() {
		return this.ratingFa;
	}

	public void setRatingFa(RatingFa ratingFa) {
		this.ratingFa = ratingFa;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "account")
	public Users getUsers() {
		return this.users;
	}

	public void setUsers(Users users) {
		this.users = users;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	public Set<UserSkill> getUserSkills_1() {
		return this.userSkills_1;
	}

	public void setUserSkills_1(Set<UserSkill> userSkills_1) {
		this.userSkills_1 = userSkills_1;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "account")
	public RatingFa getRatingFa() {
		return this.ratingFa;
	}

	public void setRatingFa(RatingFa ratingFa) {
		this.ratingFa = ratingFa;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "account")
	public Users getUsers() {
		return this.users;
	}

	public void setUsers(Users users) {
		this.users = users;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	public Set<Favorites> getFavoriteses_1() {
		return this.favoriteses_1;
	}

	public void setFavoriteses_1(Set<Favorites> favoriteses_1) {
		this.favoriteses_1 = favoriteses_1;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "account")
	public RatingFa getRatingFa() {
		return this.ratingFa;
	}

	public void setRatingFa(RatingFa ratingFa) {
		this.ratingFa = ratingFa;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	public Set<JobsUser> getJobsUsers_2() {
		return this.jobsUsers_2;
	}

	public void setJobsUsers_2(Set<JobsUser> jobsUsers_2) {
		this.jobsUsers_2 = jobsUsers_2;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	public Set<UserSkill> getUserSkills_2() {
		return this.userSkills_2;
	}

	public void setUserSkills_2(Set<UserSkill> userSkills_2) {
		this.userSkills_2 = userSkills_2;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	public Set<Jobs> getJobses_2() {
		return this.jobses_2;
	}

	public void setJobses_2(Set<Jobs> jobses_2) {
		this.jobses_2 = jobses_2;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "account")
	public Users getUsers() {
		return this.users;
	}

	public void setUsers(Users users) {
		this.users = users;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "accountByUserId")
	public Set<Rating> getRatingsForUserId() {
		return this.ratingsForUserId;
	}

	public void setRatingsForUserId(Set<Rating> ratingsForUserId) {
		this.ratingsForUserId = ratingsForUserId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	public Set<Favorites> getFavoriteses_2() {
		return this.favoriteses_2;
	}

	public void setFavoriteses_2(Set<Favorites> favoriteses_2) {
		this.favoriteses_2 = favoriteses_2;
	}

}
